Topics : Adding search functionality to our script

Questions 1
Start VM Group 1 and log in to CLIENT75 as stephanie. Follow the steps outlined in this section to add search functionality to the script. Encapsulate the script functionality into a function and repeat the enumeration process. Which .NET class makes the search against Active Directory?
DirectorySearcher

# Now we can build in search functionality. To do this, we will use two .NET classes that are located in the System.DirectoryServices namespace, more specifically the DirectoryEntry and DirectorySearcher classes.

# DirectoryEntry class encapsulates an object in the AD service hierarchy. In our case, we want to search from the very top of the AD hierarchy, so we will provide the obtained LDAP path to the DirectoryEntry class.

# DirectorySearcher class performs queries against AD using LDAP. When creating an instance of DirectorySearcher, we must specify the AD service we want to query in the form of the SearchRoot property. This property indicates where the search begins in the AD hierarchy. Since the DirectoryEntry class encapsulates the LDAP path that points to the top of the hierarchy, we will pass that as a variable to DirectorySearcher.

# DirectorySearcher documentation lists FindAll(), which returns a collection of all the entries found in AD.

[enumeration.ps1]
...
$direntry = New-Object System.DirectoryServices.DirectoryEntry($LDAP)

$dirsearcher = New-Object System.DirectoryServices.DirectorySearcher($direntry)
$dirsearcher.FindAll()
...

# We have added the $direntry variable, which is encapsulating our obtained LDAP path. The $dirsearcher variable contains the $direntry variable and uses the information as the SearchRoot, pointing to the top of the hierarchy where DirectorySearcher will run the FindAll() method.

xfreerdp /u:stephanie /d:corp.com /v:192.168.173.75 
Password: LegmanTeamBenzoin!!

.\enumeration.ps1
# By running the script, we will receiving all objects in the entire domain. 

# Filtering the output is rather simple, and there are several ways to do so. One way is to set up a filter that will sift through the samAccountType5 attribute, which is an attribute applied to all user, computer, and group objects.
The official documentation reveals different values of the samAccountType attribute, but we'll start with 0x30000000 (decimal 805306368), which will enumerate all users in the domain.

# When enumerating AD, we are very interested in the attributes of each object, which are stored in the Properties field.

# Knowing this, we can store the results we receive from our search in a new variable. We'll iterate through each object and print each property on its own line via a nested loop as shown below.

[enumeration.ps1]
...
$dirsearcher = New-Object System.DirectoryServices.DirectorySearcher($direntry)
$dirsearcher.filter="samAccountType=805306368" 

*NEW*
$result = $dirsearcher.FindAll()
Foreach($obj in $result)
{
    Foreach($prop in $obj.Properties)
    {
        $prop
    }

    Write-Host "-------------------------------"
}
*NEW*
...

# This complete script will search through AD and filter the results based on the samAccountType of our choosing, then place the results into the new $result variable. It will then further filter the results based on two foreach loops. The first loop will extract the objects stored in $result and place them into the $obj variable. The second loop will extract all the properties for each object and store the information in the $prop variable. The script will then print $prop and present the output in the terminal.

# While the Write-Host command is not required for the script to function, it does print a line between each object. This helps make the output somewhat easier to read. The script will output lots of information, which can be overwhelming depending on the existing number of domain users.

.\enumeration.ps1
...
name                           {jeffadmin}
...

# We can filter based on any property of any object type.
[enumeration.ps1]
$dirsearcher = New-Object System.DirectoryServices.DirectorySearcher($direntry)
*NEW* $dirsearcher.filter="name=jeffadmin"
$result = $dirsearcher.FindAll()

Foreach($obj in $result)
{
    Foreach($prop in $obj.Properties)
    {
*NEW*        $prop.memberof
    }

    Write-Host "-------------------------------"
}

PS C:\Users\stephanie> .\enumeration.ps1
CN=Domain Admins,CN=Users,DC=corp,DC=com
CN=Administrators,CN=Builtin,DC=corp,DC=com

# This confirms that jeffadmin is indeed a member of the Domain Admins group.
# We can make the script more flexible, allowing us to add the required parameters via the command line

[function.ps1]
function LDAPSearch {
    param (
        [string]$LDAPQuery
    )

    $PDC = [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain().PdcRoleOwner.Name
    $DistinguishedName = ([adsi]'').distinguishedName

    $DirectoryEntry = New-Object System.DirectoryServices.DirectoryEntry("LDAP://$PDC/$DistinguishedName")

    $DirectorySearcher = New-Object System.DirectoryServices.DirectorySearcher($DirectoryEntry, $LDAPQuery)

    return $DirectorySearcher.FindAll()

}

# we declare the function itself with the name of our choosing, in this case LDAPSearch. It then dynamically obtains the required LDAP path connection string and adds it to the $DirectoryEntry variable. the DirectoryEntry and our $LDAPQuery parameter is fed into the DirectorySearcher. Finally, the search is run and the output is added into an array, which is displayed in our terminal depending on our needs.

# To use the function, let's import it to memory:
PS C:\Users\stephanie> Import-Module .\function.ps1

# Within PowerShell, we can now use the LDAPSearch command (our declared function name) to obtain information from AD. To repeat parts of the user enumeration we did earlier, we can again filter on the specific samAccountType:
PS C:\Users\stephanie> LDAPSearch -LDAPQuery "(samAccountType=805306368)"

# We can also search directly for an Object Class, which is a component of AD that defines the object type. Let's use objectClass=group in this case to list all the groups in the domain:
PS C:\Users\stephanie> LDAPSearch -LDAPQuery "(objectclass=group)"

# Our script enumerates more groups than net.exe including Print Operators, IIS_IUSRS, and others. This is because it enumerates all AD objects including Domain Local groups (not just global groups).

# In order to print properties and attributes for objects, we'll need to implement the loops we discussed earlier. For now, let's do this directly from the PowerShell command.
PS C:\Users\stephanie\Desktop> foreach ($group in $(LDAPSearch -LDAPQuery "(objectCategory=group)")) {$group.properties | select {$_.cn}, {$_.member}}

# Even though this environment is somewhat small, we still received a lot of output. Let's focus on the three groups we noticed earlier in our enumeration with net.exe:
...
Sales Department              {CN=Development Department,DC=corp,DC=com, 
...

#  Earlier when we enumerated the Sales Department group with net.exe, we only found two users in it: pete and stephanie. In this case however, it appears that Development Department is also a member.
$sales = LDAPSearch -LDAPQuery "(&(objectCategory=group)(cn=Sales Department))"

# Now that we only have one object in our variable, we can simply print the member attribute directly:
PS C:\Users\stephanie\Desktop> $sales.properties.member
...
CN=Development Department,DC=corp,DC=com
...

# The Development Department is indeed a member of the Sales Department group as indicated in above results

# This is a group within a group, known as a nested group. Nested groups are relatively common in AD and scales well, allowing flexibility and dynamic membership customization of even the largest AD implementations.

# The net.exe tool missed this because it only lists user objects, not group objects. In addition, net.exe can not display specific attributes. This emphasizes the benefit of custom tools.

# Now that we know the Development Department is a member of the Sales Department, let's enumerate it:
PS C:\Users\stephanie> $group = LDAPSearch -LDAPQuery "(&(objectCategory=group)(cn=Development Department*))"
PS C:\Users\stephanie> $group.properties.member
..
CN=Management Department,DC=corp,DC=com
...

# Based on the output above, we have another case of a nested group since Management Department is a member of Development Department. Let's check this group as well:
PS C:\Users\stephanie\Desktop> $group = LDAPSearch -LDAPQuery "(&(objectCategory=group)(cn=Management Department*))"

PS C:\Users\stephanie\Desktop> $group.properties.member
...
CN=jen,CN=Users,DC=corp,DC=com
...

# Finally, after searching through multiple groups, it appears we found the end. According to the output in Listing 35, jen is the sole member of the Management Department group. Although we saw jen as a member of the Management Department group earlier in Listing 31, we obtained additional information about the group memberships in this case by enumerating the groups one-by-one.

# An additional thing to note here is that while it appears that jen is only a part of the Management Department group, she is also an indirect member of the Sales Department and Development Department groups, since groups typically inherit each other. This is normal behavior in AD; however, if misconfigured, users may end up with more privileges than they were intended to have. This might allow attackers to take advantage of the misconfiguration to further expand their reach inside the compromised domain.

# This concludes the journey with our PowerShell script that invokes .NET classes to run queries against AD via LDAP. As we have verified, this approach is much more powerful than running tools such as net.exe and provides a wealth of enumeration options.
